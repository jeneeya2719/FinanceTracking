@page "/dashboard"

<div class="d-flex">
    <!-- Sidebar -->
    <div class="sidebar" style="width: 300px; height: 100vh; position: fixed; left: 0; background: linear-gradient(180deg, #0d1f2d, #1b2b46, #2a9d8f); padding-top: 20px;">
        <div class="sidebar-header text-center mb-4">
            <h3 class="text-white">Dashboard</h3>
        </div>
        <ul class="nav flex-column">
            <li class="nav-item mb-3">
                <NavLink class="nav-link text-white" href="#" ActiveClass="active">
                    <i class="bi bi-house-door-fill"></i> Home
                </NavLink>
            </li>
            <li class="nav-item mb-3">
                <NavLink class="nav-link text-white" href="/transaction" ActiveClass="active">
                    <i class="bi bi-credit-card"></i> Transation
                </NavLink>
            </li>
            <li class="nav-item mb-3">
                <NavLink class="nav-link text-white" href="#" ActiveClass="active">
                    <i class="bi bi-credit-card"></i> Debt
                </NavLink>
            </li>
            <li class="nav-item mb-3">
                <NavLink class="nav-link text-white" href="#" ActiveClass="active">
                    <i class="bi bi-pencil-square"></i> Update Detail
                </NavLink>
            </li>
            <li class="nav-item mb-3">
                <a class="nav-link text-white" href="#" @onclick="AskForLogout">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </a>
            </li>
        </ul>
    </div>
</div>

<!-- Main Content -->
<div class="content" style="margin-left: 300px; padding: 20px;">
    <h1>Welcome to the Dashboard</h1>
    <style>
        .dashboard-card {
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            transition: background-color 0.3s ease; /* Adding transition effect */
        }


        .dashboard-header {
            display: flex;
            justify-content: space-between;
        }

        .chart-container {
            height: 300px;
        }

        .transaction-list {
            margin-top: 20px;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        /* Add Transaction button styles */
        .btn-primary {
            background-color: #0d1f2d; /* Initial color */
            border-color: #0d1f2d; /* Border color */
            transition: background-color 0.3s ease, border-color 0.3s ease; /* Adding transition effect */
        }

            .btn-primary:hover {
                background-color: #2a9d8f; /* Hover color */
                border-color: #2a9d8f; /* Border color for hover */
            }
    </style>

    <div class="container mt-4">
        @* <h3>Available Balance = Total inflow + Debt - Total Outflow</h3> *@

        <div class="row">
            <div class="col-md-4">
                <div class="dashboard-card" style="background-color: #2a9d8f; color: white; text-align: center;" onmouseover="this.style.backgroundColor='#0d1f2d'" onmouseout="this.style.backgroundColor='#2a9d8f'">
                    <h5>Total Inflows</h5>
                    <h2>@totalIncome</h2>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card" style="background-color: #2a9d8f; color: white; text-align: center;" onmouseover="this.style.backgroundColor='#0d1f2d'" onmouseout="this.style.backgroundColor='#2a9d8f'">
                    <h5>Total Outflows</h5>
                    <h2>55668</h2>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card" style="background-color: #2a9d8f; color: white; text-align: center;" onmouseover="this.style.backgroundColor='#0d1f2d'" onmouseout="this.style.backgroundColor='#2a9d8f'">
                    <h5>Total Debt</h5>
                    <h2>45879</h2>
                </div>
            </div>
        </div>



        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="RedirectToTransactionPage">Add Transaction</button>
        </div>


        <div class="row">
            <div class="col-md-6">
                <div class="dashboard-card">
                    <h5>Financial Overview</h5>
                    <div class="chart-container">
                        <p>Bar Graph</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="dashboard-card">
                    <h5>Top Transactions</h5>
                    <div class="transaction-list">
                        @foreach (var transaction in transactions)
                        {
                            <div class="transaction-item">
                                <span>@transaction.Description</span>
                                <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                                <span>@transaction.Amount.ToString()</span>
                                <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @code {
        //This method is called when the dashboard page is opened
        protected override void OnInitialized()
        {
            CalculateTotals();
        }

        private void RedirectToTransactionPage()
        {
            // Redirect to the /transaction page
            Nav.NavigateTo("/transaction");
        }

        //Creating a transaction class with some properties
        public class Transaction
        {
            public string Description { get; set; }
            public DateTime Date { get; set; }
            public decimal Amount { get; set; }
            public string Type { get; set; } // Income, Expense, Debt
        }

        //Declaring some fields
        private Transaction newTransaction = new Transaction(); //Transaction class object
        private bool showModal = false; //a boolean value that determines whether to show add transaction modal form or not

        //These fields are meant to hold the total values after CalculateTotals() method is called.
        private decimal totalIncome;
        private decimal totalExpense;
        private decimal totalDebt;

        /* Declaring and assigning value to a LIST of type Transaction. These values are set by default.
        The new values from modal form will get appended to last index of this list */
        private List<Transaction> transactions = new List<Transaction>()
    {
    new Transaction { Description = "Rent Payment", Date = DateTime.Parse("2024-12-30"), Amount = 1200, Type = "Expense" },
    new Transaction { Description = "Salary", Date = DateTime.Parse("2024-12-29"), Amount = 8000, Type = "Income" },
    new Transaction { Description = "Loan payment", Date = DateTime.Parse("2024-12-28"), Amount = 4500, Type = "Debt" }

    };

        //this method is called when Add Transaction button from the dashboard is clicked
        private void OpenModal()
        {
            newTransaction = new Transaction();
            newTransaction.Date = DateTime.Now;
            showModal = true;
        }

        //This method can be called anytime we need to get total amt of each transaction type.
        private void CalculateTotals()
        {
            //LINQ method used with lamda expressions and extension methods
            totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

            //TASK NO 1:*** use these totalExpense and totalDebt values instead of static HTML values
            totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

            totalDebt = transactions
            .Where(t => t.Type == "Debt")
            .Sum(t => t.Amount);
        }

        //this method is called to close the form modal
        private void CloseModal()
        {
            showModal = false;
        }

        //This method gets called from the modal button "Add"
        private void AddTransaction()
        {
            //TASK NO 2:*** Use try catch block for exception handling***
            if (newTransaction != null && !string.IsNullOrWhiteSpace(newTransaction.Description))
            {
                transactions.Add(new Transaction
                {
                    Description = newTransaction.Description,
                    Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
                    Amount = newTransaction.Amount,
                    Type = newTransaction.Type
                });
                CalculateTotals(); // Update totals every time after adding a new transaction.
            }
            CloseModal();
        }
    }
</div>



        

        @* <!-- Show Transaction Page Content -->
        @* @if (isTransactionPageVisible) *@
        @* { *@
        @*     <nav class="navbar navbar-light bg-light justify-content-between"> *@
        @*         <h1 class="navbar-brand mb-0 h1">Transactions</h1> *@
        @*         <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog"> *@
        @*             <span class="oi oi-plus" /> Add Transaction *@
        @*         </button> *@
        @*     </nav> *@

        @*     <!-- Add Todo Dialog  --> *@
        @*     @if (isAddTodoDialogOpen) *@
        @*     { *@
        @*         <div class="modal"> *@
        @*             <div class="modal-content"> *@
        @*                 <span @onclick="CloseAddTodoDialog" class="close-button">&times;</span> *@
        @*                 <h2>Add Todo</h2> *@
        @*                 <input type="text" placeholder="Enter todo..." @bind="newTodoTitle" /> *@
        @*                 <button @onclick="AddTodo">Add Todo</button> *@
        @*             </div> *@
        @*         </div> *@
        @*     } *@


        @* } *@
    @* </div> *@


