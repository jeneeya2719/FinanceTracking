@page "/transaction"
@using Expense_Tracking.Services

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Transactions</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add Transaction
    </button>
</nav>
<ul class="nav nav-tabs">
    <li class="nav-item ">
        <a class='nav-link btn @(_tabFilter == "All" ? "active" : "")' @onclick='()=>TabFilter("All")'>All</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Due" ? "active" : "")' @onclick='()=>TabFilter("Due")'>Due</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Done" ? "active" : "")' @onclick='()=>TabFilter("Done")'>Done</a>
    </li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Status
                    <a class='btn text-@(_sortBy == "status" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("status")'>
                        <span class='oi oi-sort-@(_sortBy == "status" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(_sortBy == "taskName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("taskName")'>
                        <span class='oi oi-sort-@(_sortBy == "taskName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Due Date
                    <a class='btn text-@(_sortBy == "dueDate" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("dueDate")'>
                        <span class='oi oi-sort-@(_sortBy == "dueDate" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Transaction> financeList = _finances;
            if (_sortBy == "status")
            {
                financeList = _sortDirection == "ascending" ? financeList.OrderBy(t => t.IsDone) : financeList.OrderByDescending(t =>
                t.IsDone);
            }
            else if (_sortBy == "taskName")
            {
                financeList = _sortDirection == "ascending" ? financeList.OrderBy(t => t.TaskName) : financeList.OrderByDescending(t =>
                t.TaskName);
            }
            else if (_sortBy == "dueDate")
            {
                financeList = _sortDirection == "ascending" ? financeList.OrderBy(t => t.DueDate) : financeList.OrderByDescending(t =>
                t.DueDate);
            }
            else if (_sortBy == "createdAt")
            {
                financeList = _sortDirection == "ascending" ? financeList.OrderBy(t => t.CreatedAt) : financeList.OrderByDescending(t =>
                t.CreatedAt);
            }

            if (_tabFilter == "Due")
            {
                financeList = financeList.Where(t => !t.IsDone);
            }
            else if (_tabFilter == "Done")
            {
                financeList = financeList.Where(t => t.IsDone);
            }

            foreach (var finanaceItem in financeList)
            {
                <tr>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input me-0" type="checkbox" checked="@finanaceItem.IsDone"
                                   @onchange='()=>ToggleDone(finanaceItem)' />
                        </div>
                    </td>
                    <td class='@(finanaceItem.IsDone ? "text-decoration-line-through" : "")'>@finanaceItem.TaskName</td>
                    <td>
                        @{
                            bool isToday = !finanaceItem.IsDone && finanaceItem.DueDate == DateTime.Today;
                            bool isOlder = !finanaceItem.IsDone && finanaceItem.DueDate < DateTime.Today;
                            <p class='small mb-0 @(isToday ? "text-warning" : isOlder ? "text-danger" : "")'>
                                @if (isToday || isOlder)
                                {
                                    <span class="oi oi-warning mr-3" />
                                }
                                @finanaceItem.DueDate.ToString("MMM dd, yyyy")
                            </p>
                        }
                </td>
                <td>
                    <p class="small mb-0">
                            @finanaceItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                    </p>
                </td>
                <td>
                        <button disabled="@finanaceItem.IsDone" class="btn btn-outline-secondary" type="button"
                                @onclick="()=>OpenEditTodoDialog(finanaceItem)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteTodoDialog(finanaceItem)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
            }
        }
    </tbody>
</table>

@if (_showEditTodoDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@_dialogOkLabel">
    <div class="form-floating">
        <input id="taskName" type="text" class="form-control" @bind="_todoModel.TaskName" placeholder="Task Name" />
        <label for="taskName">Task Name</label>
    </div>
    <div class="form-floating">
        <label for="dueDate">Due Date</label>
        <input id="dueDate" type="date" min='@DateTime.Today.ToString("yyyy-MM-dd")'
            value='@_todoModel.DueDate.ToString("yyyy-MM-dd")' @onchange="updateDate" class="form-control text-left"
            placeholder="Due Date">
    </div>

    @if (!string.IsNullOrEmpty(_editTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editTodoErrorMessage" />
        }
        </ModalDialog>
}

@if (_showDeleteTodoDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
    <p>Are you sure you want to delete <strong>@_deleteTodo.TaskName</strong> task?</p>
    @if (!string.IsNullOrEmpty(_deleteTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTodoErrorMessage" />
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTodoDialog { get; set; }
    private bool _showDeleteTodoDialog { get; set; }
    private List<Transaction> _finances { get; set; }
    private Transaction _deleteTodo { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTodoErrorMessage { get; set; }
    private string _deleteTodoErrorMessage { get; set; }
    private Transaction _todoModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";

    protected override void OnInitialized()
    {
        _finances = FinanceService.GetAll(_globalState.CurrentUser.UserId);
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Todo";
        _dialogOkLabel = "Add";
        _todoModel = new Transaction();
        _todoModel.Id = Guid.Empty;
        _showEditTodoDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _finances = FinanceService.GetAll(_globalState.CurrentUser.UserId).Where(t =>
            t.TaskName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _finances = FinanceService.GetAll(_globalState.CurrentUser.UserId);
        }
    }

    private void OpenEditTodoDialog(Transaction editTransaction)
    {
        _dialogTitle = "Edit Transaction";
        _dialogOkLabel = "Save";

        _todoModel = editTransaction;

        _showEditTodoDialog = true;
    }

    private void OpenDeleteTodoDialog(Transaction transactionItem)
    {
        _deleteTodo = transactionItem;
        _showDeleteTodoDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _todoModel.DueDate = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditTodoDialog = false;
        }
        else
        {
            try
            {
                _editTodoErrorMessage = "";
                if (_todoModel.Id == Guid.Empty)
                {
                    _finances = FinanceService.Create(_globalState.CurrentUser.UserId, _todoModel.TaskName, _todoModel.DueDate);
                }
                else
                {
                    _finances = FinanceService.Update(_globalState.CurrentUser.UserId, _todoModel.Id, _todoModel.TaskName, _todoModel.DueDate,
                    _todoModel.IsDone);
                }
                _showEditTodoDialog = false;
            }
            catch (Exception e)
            {
                _editTodoErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteTodoDialog = false;
            _deleteTodo = null;
        }
        else
        {
            try
            {
                _deleteTodoErrorMessage = "";
                _finances = FinanceService.Delete(_globalState.CurrentUser.UserId, _deleteTodo.Id);
                _showDeleteTodoDialog = false;
                _deleteTodo = null;
            }
            catch (Exception e)
            {
                _deleteTodoErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }
    private void ToggleDone(Transaction finance)
    {
        finance.IsDone = !finance.IsDone;
        _finances = FinanceService.Update(_globalState.CurrentUser.UserId, finance.Id, finance.TaskName, finance.DueDate, finance.IsDone);
    }
}
