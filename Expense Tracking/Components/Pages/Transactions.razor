@page "/transaction"


<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Transactions</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "All" ? "active" : "")' @onclick='() => TabFilter("All")'>All</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Due" ? "active" : "")' @onclick='() => TabFilter("Due")'>Due</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Done" ? "active" : "")' @onclick='() => TabFilter("Done")'>Done</a>
    </li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>Status</th>
            <th>Transaction Name</th>
            <th>Due Date</th>
            <th>Created At</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transactionItem in _transactions)
        {
            <tr>
                <td>
                    <div class="form-check"> 
                        <input class="form-check-input me-0" type="checkbox" checked="@transactionItem.IsDone"
                               @onchange='() => ToggleDone(transactionItem)' />
                    </div>  
                </td>
                <td class='@(transactionItem.IsDone ? "text-decoration-line-through" : "")'>@transactionItem.TaskName</td>
                <td>@transactionItem.DueDate.ToString("MMM dd, yyyy")</td>
                <td>@transactionItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                <td>
                    <button disabled="@transactionItem.IsDone" class="btn btn-outline-secondary" type="button"
                            @onclick="() => OpenEditTodoDialog(transactionItem)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                    <button class="btn btn-outline-danger" type="button" @onclick="() => OpenDeleteTodoDialog(transactionItem)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_showEditTodoDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="taskName" type="text" class="form-control" @bind="_todoModel.TaskName" placeholder="Task Name" />
            <label for="taskName">Task Name</label>
        </div>
        <div class="form-floating">
            <label for="dueDate">Due Date</label>
            <input id="dueDate" type="date" min='@DateTime.Today.ToString("yyyy-MM-dd")'
                   value='@_todoModel.DueDate.ToString("yyyy-MM-dd")' @onchange="updateDate" class="form-control text-left"
                   placeholder="Due Date">
        </div>

        @if (!string.IsNullOrEmpty(_editTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editTodoErrorMessage" />
        }

        <div class="d-flex justify-content-between mt-3">
            <button class="btn btn-secondary" @onclick="OnCancelEditTodo">Cancel</button>
            <button class="btn btn-primary" @onclick="OnSaveEditTodo">Add</button>
        </div>
    </ModalDialog>
}

@if (_showDeleteTodoDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteTodo.TaskName</strong> task?</p>
        @if (!string.IsNullOrEmpty(_deleteTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTodoErrorMessage" />
        }
    </ModalDialog>
}

@if (!string.IsNullOrEmpty(_generalErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        Error: @_generalErrorMessage
    </div>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTodoDialog { get; set; }
    private bool _showDeleteTodoDialog { get; set; }
    private List<Transaction> _transactions { get; set; } = new List<Transaction>();
    private Transaction _deleteTodo { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTodoErrorMessage { get; set; }
    private string _deleteTodoErrorMessage { get; set; }
    private string _generalErrorMessage { get; set; }
    private Transaction _todoModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private string _searchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            if (_globalState == null)
            {
                throw new InvalidOperationException("GlobalState is not available.");
            }

            
            if (_globalState.CurrentUser == null)
            {
                throw new InvalidOperationException("CurrentUser is not available.");
            }
           // Attempt to load transactions
            await LoadTransactions();
        }
        catch (Exception ex)
        {
            _generalErrorMessage = $"An error occurred while initializing: {ex.Message}";
        }
    }

    private async Task LoadTransactions()
    {
        try
        {
            if (_globalState == null || _globalState.CurrentUser == null)
            {
                throw new InvalidOperationException("User state is not available.");
            }

            _transactions = await TransactionService.GetAllAsync(_globalState.CurrentUser.UserId, _tabFilter, _sortBy, _sortDirection, _searchTerm);
        }
        catch (Exception ex)
        {
            _generalErrorMessage = $"An error occurred while loading transactions: {ex.Message}";
        }
    }

    private async Task SortByHandler(string sortByName)
    {
        try
        {
            if (_sortBy == sortByName)
            {
                _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
            }
            else
            {
                _sortBy = sortByName;
                _sortDirection = "ascending";
            }
            await LoadTransactions();
        }
        catch (Exception ex)
        {
            _generalErrorMessage = $"An error occurred while sorting: {ex.Message}";
        }
    }

    private async Task SearchTaskName(ChangeEventArgs e)
    {
        try
        {
            _searchTerm = e.Value.ToString();
            await LoadTransactions();
        }
        catch (Exception ex)
        {
            _generalErrorMessage = $"An error occurred while searching: {ex.Message}";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Todo";
        _dialogOkLabel = "Add";
        _todoModel = new Transaction { Id = Guid.Empty };
        _showEditTodoDialog = true;
    }

    private void OpenEditTodoDialog(Transaction editTodo)
    {
        _dialogTitle = "Edit Todo";
        _dialogOkLabel = "Save";
        _todoModel = editTodo;
        _showEditTodoDialog = true;
    }

    private void OpenDeleteTodoDialog(Transaction transactionItem)
    {
        _deleteTodo = transactionItem;
        _showDeleteTodoDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _todoModel.DueDate = DateTime.Parse(e.Value.ToString());
    }



    private async Task ToggleDone(Transaction tran)
    {
        try
        {
            tran.IsDone = !tran.IsDone;
            _transactions = await TransactionService.UpdateAsync(_globalState.CurrentUser.UserId, tran.Id, tran.TaskName, tran.DueDate, tran.IsDone);
        }
        catch (Exception ex)
        {
            _generalErrorMessage = $"An error occurred while toggling task status: {ex.Message}";
        }
    }

    private async Task OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditTodoDialog = false;
        }
        else
        {
            try
            {
                _editTodoErrorMessage = string.Empty;
                if (_todoModel.Id == Guid.Empty)
                {
                    _transactions = await TransactionService.CreateAsync(_globalState.CurrentUser.UserId, _todoModel.TaskName, _todoModel.DueDate);
                }
                else
                {
                    _transactions = await TransactionService.UpdateAsync(_globalState.CurrentUser.UserId, _todoModel.Id, _todoModel.TaskName, _todoModel.DueDate, _todoModel.IsDone);
                }
                _showEditTodoDialog = false;
            }
            catch (Exception e)
            {
                _editTodoErrorMessage = e.Message; 
            }
        }
    }

    private async Task OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showDeleteTodoDialog = false;
            _deleteTodo = null;
        }
        else
        {
            try
            {
                _deleteTodoErrorMessage = string.Empty;
                _transactions = await TransactionService.DeleteAsync(_globalState.CurrentUser.UserId, _deleteTodo.Id);
                _showDeleteTodoDialog = false;
                _deleteTodo = null;
            }
            catch (Exception e)
            {
                _deleteTodoErrorMessage = e.Message;
            }
        }
    }

    private void TabFilter(string tab)
    {
        _tabFilter = tab;
        LoadTransactions();
    }

    private void OnCancelEditTodo()
    {
        _showEditTodoDialog = false;
    }

    private async Task OnSaveEditTodo()
    {
        await OnEditTodoDialogClose(false);
    }
}
